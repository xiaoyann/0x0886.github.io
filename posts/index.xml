<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 0x0886</title>
    <link>/posts.html</link>
    <description>Recent content in Posts on 0x0886</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Sep 2017 12:12:00 +0800</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>怎么提高学习能力？</title>
      <link>/posts/thinking/how-to-enhance-your-learning-ability.html</link>
      <pubDate>Sun, 17 Sep 2017 12:12:00 +0800</pubDate>
      
      <guid>/posts/thinking/how-to-enhance-your-learning-ability.html</guid>
      <description> 我们在评估一个人的能力时，除了要看这个人的专业能力，还要看他的通用能力。专业能力就是我们常说的硬技能，如开发者的编码能力、产品经理的需求分析能力；通用能力就是我们常说的软技能，如学习能力、思考能力、沟通能力&amp;hellip;&amp;hellip;
通过对通用能力的评估，我们希望看到的是这个人的潜力如何。潜力主要体现在技术水平的发展与团队融合这两方面。对于初级和中级水平的工程师，一般的公司会更看重你的潜力，胜过你现在的专业能力。
学习能力是非常重要的一项。很多公司的招聘描述中就有“善于学习”、“快速学习能力”等强调学习能力的要求。因为学习能力优秀的人有三点好处：
1. 容易理解、掌握新知识 工作时很多时候并不一定是在用自己最熟悉的技术，做自己最擅长的事。刚进入一家新公司时可能要去学习公司已沉淀下来的技术体系；为了解决某个问题可能要去研究一些未曾接触过的技术；在往上发展时，可能需要跨部门去学习其他领域的知识。
2. 有潜力成为更强的人 学习能力强的人快速达到中、高级水平是很容易的事，甚至有可能变得更强。而且公司也更愿意从底层培养人才，因为忠诚度更高。学习能力怎么样，是决定你是否有潜力成长起来的关键因素之一。
3. 能跟得上技术的快速变化 这个时代各行各业都在变化。技术也是一样，可以说是日新月异，尤其是前端技术。没有优秀的学习能力很难跟上团队的步伐。
那么优秀的学习能力体现在哪些方面，或者说怎么提高学习能力了？ 1. 保持对知识的渴望 2. 勤奋是必须的 3. 学习如何看书，然后多看好书 4. 通过多种途径寻找答案 5. 坚持总结，笔记或者博客，有没有学明白，写写就知道了 6. 抽象知识的结构，找到知识之间的联系，不要靠机械记忆 7. 分辨出什么该学，什么不该学，人的精力是有限的，不要和无限的知识较劲 8. 实践，学以致用，这是对所学最好的校验 9. 学习如何学习，找到适合自己的一套学习方法论 </description>
    </item>
    
    <item>
      <title>解决 JavaScript 浮点数精度丢失问题</title>
      <link>/posts/js/solve-the-problem-of-javascript-precision.html</link>
      <pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/posts/js/solve-the-problem-of-javascript-precision.html</guid>
      <description>// 1. 两数相加 // 0.1 + 0.2 = 0.30000000000000004 // 0.7 + 0.1 = 0.7999999999999999 // 0.2 + 0.4 = 0.6000000000000001 // 2.22 + 0.1 = 2.3200000000000003 // 2. 两数相减 // 1.5 - 1.2 = 0.30000000000000004 // 0.3 - 0.2 = 0.09999999999999998 // 3. 两数相乘 // 19.9 * 100 = 1989.9999999999998 // 19.9 * 10 * 10 = 1990 // 1306377.64 * 100 = 130637763.99999999 // 1306377.64 * 10 * 10 = 130637763.</description>
    </item>
    
    <item>
      <title>Webpack &#43; React &#43; ES6 技术栈全套配置指南</title>
      <link>/posts/engineering/how-to-use-webpack.html</link>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/posts/engineering/how-to-use-webpack.html</guid>
      <description>因为最近在工作中尝试了 webpack、react、redux、es6 技术栈，所以总结出了一套 boilerplate，以便下次做项目时可以快速开始，并进行持续优化。对应的项目地址：webpack-react-redux-es6-boilerplate
该项目的 webpack 配置做了不少优化，所以构建速度还不错。文章的最后还对使用 webpack 的问题及性能优化作出了总结。
项目结构规划 每个模块相关的 css、img、js 文件都放在一起，比较直观，删除模块时也会方便许多。测试文件也同样放在一起，哪些模块有没有写测试，哪些测试应该一起随模块删除，一目了然。
build |-- webpack.config.js # 公共配置 |-- webpack.dev.js # 开发配置 |-- webpack.release.js # 发布配置 docs # 项目文档 node_modules src # 项目源码 |-- conf # 配置文件 |-- pages # 页面目录 | |-- page1 | | |-- index.js # 页面逻辑 | | |-- index.scss # 页面样式 | | |-- img # 页面图片 | | | |-- xx.png | | |-- __tests__ # 测试文件 | | | |-- xx.</description>
    </item>
    
  </channel>
</rss>